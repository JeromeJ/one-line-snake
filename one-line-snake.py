(lambda c, t, r:(lambda sc, dirs, **opt:(sc.nodelay(1),c.cbreak(),sc.keypad(1),sc.addstr(0,0, str(opt['delay'])),(lambda x, y, snake, dir, lost, points, apple, key, _map: (sc.addstr(0, 0, 'One-line Snake by JeromeJ (\'q\' to quit, \'+-\' to change speed)\n{}'.format('-'*x)),sc.addstr(0, x-12, 'POINTS: {}'.format(points[0])),[sc.addstr(y, x, '+') for y, x in snake[:-1]] and None,[sc.addstr(y, x, '>') for y, x in (snake[-1],)] and None,sc.refresh(),(lambda spawn_apple: apple.append(spawn_apple()) or apple.pop(0) and list(iter(lambda:(lambda key:(key,c.flushinp(),not lost and (t.sleep(opt['delay'][0]) or key == 465 and (opt['delay'].append(opt['delay'][0]/2) or opt['delay'].pop(0)) or key == 464 and opt['delay'][0] < .3 and (opt['delay'].append(opt['delay'][0]*2) or opt['delay'].pop(0)),sc.addstr(y-1, 0, ' KEY: '+str(key)+'  ') or sc.addstr(y-1, int(x/2-10), ' SPEED: '+str(int(10/opt['delay'][0]))+'  ') or sc.addstr(y-1, x-15, 'DIRECTION: '+str(dir[0].s)),key in set(dirs) - {dir[0].opp} and (dir.append(dirs[key]) or dir.pop(0)),snake.append(next((new_head,(new_head in snake or not(1 < new_head[0] < y-1) or not(0 < new_head[1] < x-1)) and (sc.addstr(int(y/2), int(x/2-10), '[YOU LOST]') or sc.refresh() or lost.append(True)))[0] for new_head in [(snake[-1][0], snake[-1][1]+1) * (dir[0].v == c.KEY_RIGHT)+ (snake[-1][0], snake[-1][1]-1) * (dir[0].v == c.KEY_LEFT)+ (snake[-1][0]-1, snake[-1][1]) * (dir[0].v == c.KEY_UP)+ (snake[-1][0]+1, snake[-1][1]) * (dir[0].v == c.KEY_DOWN)])) or (snake[-1] == apple[0] and (points.append(10/opt['delay'][0]/10) or points.pop(0) or sc.addstr(0, x-12, 'POINTS: {}'.format(int(points[0]))) or apple.append(spawn_apple()) or apple.pop(0))) or (snake[-1] != apple[0] and sc.addstr(*(snake.pop(0)+(' ',)))) or sc.addstr(*(snake[-2]+('+',))) or sc.addstr(*(snake[-1]+(dir[0].s,))))*0)[0])(sc.getch(),),ord('q'))))(lambda: next((apple,sc.addstr(apple[0], apple[1], '*')) for apple in [r.sample(_map - set(snake), 1)[0]])[0]))*0)(*next((x,y,[(int((y-2)/2), x) for x in range(5, 5+opt['starting_length'])],[dirs[c.KEY_RIGHT]],[],[0],[(0,0)],-1, set((_y, _x) for _y in range(2, y-1) for _x in range(x)),) for y,x in (sc.getmaxyx(),))),sc.refresh(),c.endwin())*0)(c.initscr(),dict(zip((c.KEY_UP, c.KEY_DOWN, c.KEY_RIGHT, c.KEY_LEFT),map(lambda el:__import__('collections').namedtuple('Dir', 'v s opp')(*el),((c.KEY_UP, '^', c.KEY_DOWN),(c.KEY_DOWN, 'v', c.KEY_UP),(c.KEY_RIGHT, '>', c.KEY_LEFT),(c.KEY_LEFT, '<', c.KEY_RIGHT),)))),delay=[.15],starting_length=6))(*map(__import__, ('curses', 'time', 'random')))
